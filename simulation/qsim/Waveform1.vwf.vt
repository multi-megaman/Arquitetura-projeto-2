// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/01/2023 18:41:43"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MIPS
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MIPS_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [31:0] instruction;
// wires                                               
wire Zero_flag;
wire [31:0] aluResult;

// assign statements (if any)                          
MIPS i1 (
// port map - connection between master ports and signals/registers   
	.Zero_flag(Zero_flag),
	.aluResult(aluResult),
	.clock(clock),
	.instruction(instruction)
);
initial 
begin 
#1000000 $finish;
end 
// instruction[ 31 ]
initial
begin
	instruction[31] = 1'b0;
end 
// instruction[ 30 ]
initial
begin
	instruction[30] = 1'b0;
end 
// instruction[ 29 ]
initial
begin
	instruction[29] = 1'b0;
end 
// instruction[ 28 ]
initial
begin
	instruction[28] = 1'b0;
end 
// instruction[ 27 ]
initial
begin
	instruction[27] = 1'b0;
end 
// instruction[ 26 ]
initial
begin
	instruction[26] = 1'b0;
end 
// instruction[ 25 ]
initial
begin
	instruction[25] = 1'b0;
end 
// instruction[ 24 ]
initial
begin
	instruction[24] = 1'b0;
end 
// instruction[ 23 ]
initial
begin
	instruction[23] = 1'b0;
end 
// instruction[ 22 ]
initial
begin
	instruction[22] = 1'b0;
end 
// instruction[ 21 ]
initial
begin
	instruction[21] = 1'b1;
end 
// instruction[ 20 ]
initial
begin
	instruction[20] = 1'b0;
end 
// instruction[ 19 ]
initial
begin
	instruction[19] = 1'b0;
end 
// instruction[ 18 ]
initial
begin
	instruction[18] = 1'b0;
end 
// instruction[ 17 ]
initial
begin
	instruction[17] = 1'b1;
end 
// instruction[ 16 ]
initial
begin
	instruction[16] = 1'b0;
end 
// instruction[ 15 ]
initial
begin
	instruction[15] = 1'b1;
end 
// instruction[ 14 ]
initial
begin
	instruction[14] = 1'b1;
end 
// instruction[ 13 ]
initial
begin
	instruction[13] = 1'b1;
end 
// instruction[ 12 ]
initial
begin
	instruction[12] = 1'b1;
end 
// instruction[ 11 ]
initial
begin
	instruction[11] = 1'b1;
end 
// instruction[ 10 ]
initial
begin
	instruction[10] = 1'b0;
end 
// instruction[ 9 ]
initial
begin
	instruction[9] = 1'b1;
end 
// instruction[ 8 ]
initial
begin
	instruction[8] = 1'b0;
end 
// instruction[ 7 ]
initial
begin
	instruction[7] = 1'b1;
end 
// instruction[ 6 ]
initial
begin
	instruction[6] = 1'b0;
end 
// instruction[ 5 ]
initial
begin
	instruction[5] = 1'b1;
end 
// instruction[ 4 ]
initial
begin
	instruction[4] = 1'b0;
end 
// instruction[ 3 ]
initial
begin
	instruction[3] = 1'b0;
end 
// instruction[ 2 ]
initial
begin
	instruction[2] = 1'b0;
end 
// instruction[ 1 ]
initial
begin
	instruction[1] = 1'b0;
end 
// instruction[ 0 ]
initial
begin
	instruction[0] = 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #50000 1'b1;
	#50000;
end 
endmodule

